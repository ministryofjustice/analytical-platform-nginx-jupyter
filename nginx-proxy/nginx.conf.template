# Envars used in this config file.
#
# USERNAME -  The GitHub username of the person whose instance this is.
# LOGOUT_URL -  To where users should be directed on logout.
# AUTH0_CLIENT_SECRET -  From Auth0.
# AUTH0_CLIENT_ID -  From Auth0.
# AUTH0_TENANT_DOMAIN -  From Auth0... dev or alpha.
# APP_HOST -  The hostname of the proxied app (e.g. rstudio)
# APP_PORT -  The port on which the proxied app is listening (e.g. 8787)
# REDIRECT_DOMAIN - The domain of the analytical platform
#
# These are replaced via the envsubst command. See the `start_proxy.sh` script for details.

events {
  worker_connections 128;
}

http {

  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8 ipv6=off;

  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 5;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;

  # cache for JWKs
  lua_shared_dict jwks 1m;

  # cache for activity data for pod idler
  lua_shared_dict activity 256k; 

  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }

  # Experimental heading related settings.
  proxy_buffering on;
  proxy_buffer_size 32k;
  proxy_buffers 4 32k;
  client_body_buffer_size 32k;
  client_header_buffer_size 8k;
  large_client_header_buffers 8 64k;

  # Allow larger uploads from Jupyter (see: ANPL-716)
  client_max_body_size 50M;

  server {
    listen 3000 default_server;

    error_log /var/log/nginx/error.log info;

    # This is for kubernetes to check the container is functional
    location /nginx-health {
    
        # if we're just starting, we need to set a last-seen value of the present time
        content_by_lua_block {
          local activity = ngx.shared.activity
          local seen, flags = activity:get("last_seen")

          if (type(seen) == type(nil)) then
            local timestamp = os.time(os.date("!*t"))
            activity:set("last_seen",timestamp)
	      end
          ngx.print("OK")
          ngx.exit(ngx.HTTP_OK)
	    }
    }

      # session activity API - returns unix timestamp
      location /last-seen {
        content_by_lua_block {
          local activity = ngx.shared.activity
          local last_seen, flags = activity:get("last_seen")
          ngx.print(last_seen)
          ngx.exit(ngx.HTTP_OK)
        }
      }

    location / {
      # This logic calls out to AUTH0 for OIDC authentication
      access_by_lua '
          -- access activity shared memory
          local activity = ngx.shared.activity

          -- Configuration for the OIDC call
          local opts = {
            redirect_uri = "https://${USERNAME}-jupyter-lab.${REDIRECT_DOMAIN}/callback",
            discovery = "https://${AUTH0_TENANT_DOMAIN}/.well-known/openid-configuration",
            token_signing_alg_values_expected = "HS256",
            client_id = "${AUTH0_CLIENT_ID}",
            client_secret = "${AUTH0_CLIENT_SECRET}",
            redirect_after_logout_uri = "https://${AUTH0_TENANT_DOMAIN}/v2/logout?client_id=${AUTH0_CLIENT_ID}&redirectTo=${LOGOUT_URL}",
            redirect_after_logout_with_id_token_hint = false
          }

          -- call bearer_jwt_verify for OAuth 2.0 JWT validation.
          local res, err = require("resty.openidc").authenticate(opts)

          -- error out if Auth0 goes boom or fails to return a valid result.
          if err or not res then
            ngx.status = 403
            ngx.say(err and err or "no access_token provided")
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end

          -- use the expected github user of the upstream service.
          local username = "${USERNAME}";

          if res and username then

            -- if the username is populated, check the result contains this
            -- username. If not, the wrong user is trying to log in to this
            -- service. So raise a 403 Forbidden and say something useful to
            -- the user.
            local remote_user = res["id_token"]["nickname"]
            if remote_user ~= username then
              ngx.status = 403
              ngx.say("User not allowed for this application.")
              ngx.exit(ngx.HTTP_FORBIDDEN)
            end
            
            -- record the access time so we can decide when to idle
            local timestamp = os.time(os.date("!*t"))
            activity:set("last_seen",timestamp)

          end
      ';

      # JupyterLab specific proxy settings.
      location / {
        proxy_read_timeout    300s;
        proxy_pass            http://${APP_HOST}:${APP_PORT};
        proxy_set_header      Host $host;
        # most recent trusted IP
        proxy_set_header      X-Real-Ip $remote_addr;
        # prevents proxy from anonymyzing user
        proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
      }

      # Kernel API.
      location ~ /api/kernels/ {
        proxy_pass            http://${APP_HOST}:${APP_PORT};
        proxy_set_header      Host $host;
        # create the initial HTTP/1.1 session to upgrade
        proxy_http_version    1.1;
        # upgrade a HTTP connection for web sockets
        proxy_set_header      Upgrade "websocket";
        # "Upgrade" must be listed here since it is a hop-by-hop header
        proxy_set_header      Connection "Upgrade";
        proxy_read_timeout    86400;
      }
      # Terminal connections.
      location ~ /terminals/ {
        proxy_pass            http://${APP_HOST}:${APP_PORT};
        proxy_set_header      Host $host;
        proxy_http_version    1.1;
        proxy_set_header      Upgrade "websocket";
        proxy_set_header      Connection "Upgrade";
        proxy_read_timeout    86400;
      }
      # Tunnel
      location ~ /_tunnel_/8050/ {
        proxy_pass            http://${APP_HOST}:8050;
        proxy_set_header      Host $host;
        proxy_http_version    1.1;
        proxy_read_timeout    86400;
        proxy_set_header      X-Real-Ip $remote_addr;
        proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
      }
    }
  }
}
